const geminiService = require('./geminiService');
const huggingfaceService = require('./huggingfaceService');
const openaiService = require('./openaiService');
const knowledgeBaseService = require('./knowledgeBaseService');
const languageService = require('./languageService');
const logger = require('../utils/logger');

class AIService {
  constructor() {
    this.providers = [
      { name: 'gemini', service: geminiService, priority: 1 },
      { name: 'huggingface', service: huggingfaceService, priority: 2 },
      { name: 'openai', service: openaiService, priority: 3 }
    ];
  }

  // Main method to process health queries
  async processHealthQuery({ query, language, context, phoneNumber }) {
    try {
      logger.info(`ü§ñ Processing health query: "${query}" in language: ${language}`);

      // Enhance query with context if available
      const enhancedQuery = this.buildContextualQuery(query, context);

      // Try AI providers in order of priority
      for (const provider of this.providers) {
        try {
          logger.info(`üîÑ Trying ${provider.name} provider...`);
          
          const result = await provider.service.processHealthQuery({
            query: enhancedQuery,
            language,
            context
          });

          // More detailed logging for debugging
          logger.info(`üìä ${provider.name} result:`, {
            hasResult: !!result,
            hasMessage: !!(result && result.message),
            messageLength: result && result.message ? result.message.length : 0,
            messagePreview: result && result.message ? result.message.substring(0, 100) + '...' : 'No message'
          });

          if (result && result.message && result.message.trim().length > 0) {
            logger.info(`‚úÖ ${provider.name} provider successful with valid response`);
            
            // Translate response if needed
            const translatedResponse = await this.translateResponse(result.message, language);
            
            return {
              message: translatedResponse,
              provider: provider.name,
              language: language,
              confidence: result.confidence || 0.8,
              timestamp: new Date().toISOString()
            };
          } else {
            logger.warn(`‚ö†Ô∏è ${provider.name} returned empty or invalid response`);
          }

        } catch (error) {
          logger.warn(`‚ùå ${provider.name} provider failed:`, error.message);
          logger.error(`üîç Full error details for ${provider.name}:`, error);
          continue;
        }
      }

      // If all AI providers fail, use knowledge base only as true fallback
      logger.warn('üóÉÔ∏è All AI providers failed or returned empty responses, using knowledge base as fallback...');
      return await this.useKnowledgeBaseFallback(query, language, context);

    } catch (error) {
      logger.error('Error in AI service:', error);
      return this.getDefaultErrorResponse(language);
    }
  }

  // Build contextual query using conversation history
  buildContextualQuery(currentQuery, context) {
    if (!context || !context.length) {
      return currentQuery;
    }

    // Get last few messages for context
    const recentContext = context.slice(-3).map(item => 
      `User: ${item.query}\nBot: ${item.response}`
    ).join('\n\n');

    return `Previous conversation context:\n${recentContext}\n\nCurrent question: ${currentQuery}`;
  }

  // Translate response based on detected language
  async translateResponse(response, targetLanguage) {
    try {
      if (targetLanguage === 'en') {
        return response;
      }

      // For Hindi and Hinglish, translate the response
      if (targetLanguage === 'hi' || targetLanguage === 'hinglish') {
        const translated = await languageService.translateText(response, targetLanguage);
        return translated || response;
      }

      return response;
    } catch (error) {
      logger.error('Translation error:', error);
      return response;
    }
  }

  // Use knowledge base as fallback
  async useKnowledgeBaseFallback(query, language, context) {
    try {
      // Check if knowledge base fallback is disabled (for testing)
      if (process.env.DISABLE_KNOWLEDGE_BASE_FALLBACK === 'true') {
        logger.info('üö´ Knowledge base fallback is disabled');
        return this.getDefaultErrorResponse(language);
      }

      logger.info('üóÉÔ∏è Attempting knowledge base fallback for query:', query);
      const knowledgeResponse = await knowledgeBaseService.searchHealthInfo(query, language);
      
      if (knowledgeResponse) {
        // Limit knowledge base response length to prevent long formatted responses
        const limitedResponse = this.limitResponseLength(knowledgeResponse, 200);
        
        return {
          message: limitedResponse,
          provider: 'knowledge_base',
          language: language,
          confidence: 0.5, // Lower confidence for fallback
          timestamp: new Date().toISOString()
        };
      }

      // If knowledge base also fails, return default response
      return this.getDefaultErrorResponse(language);

    } catch (error) {
      logger.error('Knowledge base fallback failed:', error);
      return this.getDefaultErrorResponse(language);
    }
  }

  // Limit response length to prevent overly long responses
  limitResponseLength(response, maxLength = 200) {
    if (!response || response.length <= maxLength) {
      return response;
    }

    // Remove formatting characters and emojis
    let cleanResponse = response
      .replace(/[üìçüíäüå°Ô∏èüè•üíßüçØüßÑü´ñ]/g, '') // Remove emojis
      .replace(/\*\*(.*?)\*\*/g, '$1') // Remove bold formatting
      .replace(/\*/g, '') // Remove asterisks
      .replace(/\n‚Ä¢/g, ',') // Convert bullet points to commas
      .replace(/\n/g, ' ') // Replace newlines with spaces
      .trim();

    // Truncate to max length and add "See doctor if symptoms persist"
    if (cleanResponse.length > maxLength) {
      cleanResponse = cleanResponse.substring(0, maxLength - 50).trim();
      // Find last complete sentence
      const lastPeriod = cleanResponse.lastIndexOf('.');
      if (lastPeriod > 50) {
        cleanResponse = cleanResponse.substring(0, lastPeriod + 1);
      }
      cleanResponse += ' See doctor if symptoms persist.';
    }

    return cleanResponse;
  }

  // Get default error response
  getDefaultErrorResponse(language) {
    const defaultResponses = {
      en: 'I apologize, but I\'m having trouble processing your health query right now. Please try again later or consult with a healthcare professional for immediate assistance. üè•',
      hi: '‡§Æ‡§æ‡§´ ‡§ï‡§∞‡•á‡§Ç, ‡§Æ‡•Å‡§ù‡•á ‡§Ö‡§≠‡•Ä ‡§Ü‡§™‡§ï‡•á ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§ï‡•ã ‡§∏‡§Æ‡§ù‡§®‡•á ‡§Æ‡•á‡§Ç ‡§™‡§∞‡•á‡§∂‡§æ‡§®‡•Ä ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§§‡§§‡•ç‡§ï‡§æ‡§≤ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§ø‡§∏‡•Ä ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§™‡•á‡§∂‡•á‡§µ‡§∞ ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç‡•§ üè•',
      hinglish: 'Sorry, mujhe abhi aapke health question ko process karne mein problem ho rahi hai. Please baad mein try kariye ya immediate help ke liye doctor se consult kariye. üè•'
    };

    return {
      message: defaultResponses[language] || defaultResponses.en,
      provider: 'default',
      language: language,
      confidence: 0.5,
      timestamp: new Date().toISOString()
    };
  }

  // Check if query indicates emergency
  isEmergencyQuery(query) {
    const emergencyKeywords = [
      // English
      'emergency', 'urgent', 'heart attack', 'stroke', 'bleeding', 'accident', 'unconscious', 
      'can\'t breathe', 'chest pain', 'severe pain', 'suicide', 'overdose',
      
      // Hindi
      '‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤', '‡§§‡•Å‡§∞‡§Ç‡§§', '‡§¶‡§ø‡§≤ ‡§ï‡§æ ‡§¶‡•å‡§∞‡§æ', '‡§ñ‡•Ç‡§®', '‡§¶‡•Å‡§∞‡•ç‡§ò‡§ü‡§®‡§æ', '‡§¨‡•á‡§π‡•ã‡§∂', '‡§∏‡§æ‡§Ç‡§∏ ‡§®‡§π‡•Ä‡§Ç', '‡§õ‡§æ‡§§‡•Ä ‡§Æ‡•á‡§Ç ‡§¶‡§∞‡•ç‡§¶',
      
      // Hinglish
      'emergency hai', 'urgent hai', 'heart attack', 'bleeding ho raha', 'saans nahi aa rahi',
      'chest pain hai', 'behosh hai'
    ];

    const lowerQuery = query.toLowerCase();
    return emergencyKeywords.some(keyword => lowerQuery.includes(keyword.toLowerCase()));
  }

  // Get emergency response
  getEmergencyResponse(language) {
    const emergencyResponses = {
      en: 'üö® MEDICAL EMERGENCY DETECTED üö®\n\nThis seems like a medical emergency. Please:\n\n1. Call emergency services immediately (112 in India)\n2. Seek immediate medical attention\n3. Contact your nearest hospital\n4. If possible, have someone accompany you\n\n‚ö†Ô∏è Do not delay seeking professional medical help!',
      hi: 'üö® ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤ ‡§ï‡§æ ‡§™‡§§‡§æ ‡§ö‡§≤‡§æ üö®\n\n‡§Ø‡§π ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤ ‡§≤‡§ó‡§§‡§æ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ:\n\n1. ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡•á‡§µ‡§æ‡§ì‡§Ç ‡§ï‡•ã ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç (‡§≠‡§æ‡§∞‡§§ ‡§Æ‡•á‡§Ç 112)\n2. ‡§§‡§§‡•ç‡§ï‡§æ‡§≤ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§≤‡•á‡§Ç\n3. ‡§Ö‡§™‡§®‡•á ‡§®‡§ø‡§ï‡§ü‡§§‡§Æ ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤ ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç\n4. ‡§Ø‡§¶‡§ø ‡§∏‡§Ç‡§≠‡§µ ‡§π‡•ã ‡§§‡•ã ‡§ï‡§ø‡§∏‡•Ä ‡§ï‡•ã ‡§∏‡§æ‡§• ‡§≤‡•á ‡§ú‡§æ‡§è‡§Ç\n\n‚ö†Ô∏è ‡§™‡•á‡§∂‡•á‡§µ‡§∞ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§≤‡•á‡§®‡•á ‡§Æ‡•á‡§Ç ‡§¶‡•á‡§∞‡•Ä ‡§® ‡§ï‡§∞‡•á‡§Ç!',
      hinglish: 'üö® MEDICAL EMERGENCY DETECT HUA HAI üö®\n\nYe medical emergency lagta hai. Please:\n\n1. Emergency services ko immediately call kariye (India mein 112)\n2. Turant medical help liye\n3. Apne nearest hospital se contact kariye\n4. Agar possible ho to kisi ko saath le jaiye\n\n‚ö†Ô∏è Professional medical help lene mein delay mat kariye!'
    };

    return emergencyResponses[language] || emergencyResponses.en;
  }

  // Analyze query sentiment and urgency
  analyzeQuery(query) {
    const urgencyWords = ['urgent', 'emergency', 'immediate', 'severe', 'critical', 'serious'];
    const painWords = ['pain', 'hurt', 'ache', 'burning', 'sharp', 'throbbing'];
    const mentalHealthWords = ['depressed', 'anxiety', 'stress', 'worried', 'scared', 'panic'];

    const lowerQuery = query.toLowerCase();
    
    return {
      urgency: urgencyWords.some(word => lowerQuery.includes(word)) ? 'high' : 'normal',
      hasPain: painWords.some(word => lowerQuery.includes(word)),
      mentalHealth: mentalHealthWords.some(word => lowerQuery.includes(word)),
      isQuestion: lowerQuery.includes('?') || lowerQuery.startsWith('what') || lowerQuery.startsWith('how') || lowerQuery.startsWith('why')
    };
  }
}

module.exports = new AIService();